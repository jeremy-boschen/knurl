/** biome-ignore-all lint/suspicious/noExplicitAny: Required for CSS as object processing */

/**
 * Single source of truth for CSS variables:
 * - default bucket = variables found in index.css
 * - custom bucket = variables found in App.css
 * The JSON is generated by a Vite plugin at dev/build time.
 */
import extracted from "./extracted-css-vars.json"

export type CssVarsMap = {
  theme: Record<string, string>
  light: Record<string, string>
  dark: Record<string, string>
}

export type EnsureDetailedResult = {
  ensured: CssVarsMap
  added: {
    base: string[] // custom vars injected into base (theme)
    dark: string[] // custom vars injected into dark
  }
}

function getCustomNames(): string[] {
  const names = (extracted as any)?.customNames as string[] | undefined
  return names?.length ? names : []
}

function sanitizeCustomValue(value: string | undefined): string | undefined {
  if (value === undefined) {
    return undefined
  }

  // Use only the first line to avoid comments or stray declarations getting concatenated.
  let sanitized = value.split("\n", 1)[0]

  // Strip anything after a block comment closer that might have been captured.
  const commentClose = sanitized.indexOf("*/")
  if (commentClose >= 0) {
    sanitized = sanitized.slice(0, commentClose)
  }

  // Remove any trailing semicolons or whitespace.
  sanitized = sanitized.replace(/;.*/, "").trim()

  return sanitized.length > 0 ? sanitized : undefined
}

function sanitizeCustomRecord(record: Record<string, string> | undefined): Record<string, string> {
  if (!record) {
    return {}
  }

  const out: Record<string, string> = {}
  for (const [key, value] of Object.entries(record)) {
    const sanitized = sanitizeCustomValue(value)
    if (sanitized !== undefined) {
      out[key] = sanitized
    }
  }
  return out
}

function getCustomLight(name: string): string | undefined {
  const light = (extracted as any)?.custom?.light as Record<string, string> | undefined
  return sanitizeCustomValue(light?.[name])
}

function getCustomDark(name: string): string | undefined {
  const dark = (extracted as any)?.custom?.dark as Record<string, string> | undefined
  return sanitizeCustomValue(dark?.[name])
}

/**
 * Ensure that all custom variables (from App.css) exist in the theme cssVars map.
 * Values are taken from the extracted custom light/dark buckets.
 */
export function ensureCustomCssVarsDetailed(cssVars: CssVarsMap): EnsureDetailedResult {
  const out: CssVarsMap = {
    theme: { ...(cssVars.theme ?? {}) },
    light: { ...(cssVars.light ?? {}) },
    dark: { ...(cssVars.dark ?? {}) },
  }

  const addedBase: string[] = []
  const addedDark: string[] = []

  for (const name of getCustomNames()) {
    const presentInTheme = name in out.theme
    const presentInLight = name in out.light
    const presentInDark = name in out.dark
    const hasAny = presentInTheme || presentInLight || presentInDark

    if (!hasAny) {
      const dl = getCustomLight(name)
      if (dl !== undefined) {
        out.theme[name] = dl
        addedBase.push(name)
      }
    }
    if (!presentInDark) {
      const dd = getCustomDark(name) ?? getCustomLight(name)
      if (dd !== undefined) {
        out.dark[name] = dd
        addedDark.push(name)
      }
    }
  }

  return { ensured: out, added: { base: addedBase, dark: addedDark } }
}

/** Convenience helper returning only the map */
export function ensureCustomCssVars<T extends CssVarsMap>(cssVars: T): T {
  return ensureCustomCssVarsDetailed(cssVars).ensured as T
}

/**
 * Append any missing custom vars to raw CSS using extracted custom defaults.
 */
export function appendMissingCustomVars(css: string): string {
  const names = getCustomNames()
  const missingVars = names.filter((n) => !new RegExp(`--${n}\\s*:`).test(css))

  if (missingVars.length === 0) {
    return css
  }

  const rootLines = missingVars
    .map((n) => ({ n, v: getCustomLight(n) }))
    .filter((e) => e.v !== undefined)
    .map((e) => `  --${e.n}: ${e.v};`)

  const darkLines = missingVars
    .map((n) => ({ n, v: getCustomDark(n) ?? getCustomLight(n) }))
    .filter((e) => e.v !== undefined)
    .map((e) => `  --${e.n}: ${e.v};`)

  if (rootLines.length + darkLines.length === 0) {
    return css
  }

  const block = [
    "/* Injected custom variables (from App.css extracted defaults) */",
    ":root {",
    ...rootLines,
    "}",
    ".dark {",
    ...darkLines,
    "}",
  ].join("\n")

  return `${css.trimEnd()}\n\n${block}\n`
}

/**
 * Build a theme CSS string from extracted variables:
 * - Defaults from index.css
 * - Custom additions from App.css (appended in a commented section)
 * Produces :root and .dark blocks.
 */
export function buildDefaultThemeCss(): string {
  const def = (extracted as any)?.default as
    | {
        light?: Record<string, string>
        dark?: Record<string, string>
      }
    | undefined

  const cus = (extracted as any)?.custom as
    | {
        light?: Record<string, string>
        dark?: Record<string, string>
      }
    | undefined

  const defLight = def?.light ?? {}
  const defDark = def?.dark ?? {}
  const cusLight = sanitizeCustomRecord(cus?.light)
  const cusDark = sanitizeCustomRecord(cus?.dark)

  const header = [
    "/*",
    " * Edit variables below or paste a remote theme; missing custom vars will be appended automatically.",
    " */",
  ].join("\n")

  const format = (vars: Record<string, string>) =>
    Object.entries(vars)
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([k, v]) => `  --${k}: ${v};`)

  const blocks: string[] = [header]

  // :root block
  const lightBase = format(defLight)
  const lightCustom = format(cusLight)
  if (lightBase.length || lightCustom.length) {
    blocks.push(":root {", ...lightBase)
    if (lightCustom.length) {
      blocks.push("  /* Custom variables (from App.css) */", ...lightCustom)
    }
    blocks.push("}")
  }

  // .dark block
  const darkBase = format(defDark)
  const darkCustom = format(cusDark)
  if (darkBase.length || darkCustom.length) {
    if (lightBase.length || lightCustom.length) {
      blocks.push("") // blank line between blocks
    }
    blocks.push(".dark {", ...darkBase)
    if (darkCustom.length) {
      blocks.push("  /* Custom variables (from App.css) */", ...darkCustom)
    }
    blocks.push("}")
  }

  return blocks.join("\n")
}
