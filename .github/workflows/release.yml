name: Release (Windows)

on:
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Enable Corepack
        run: corepack enable

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Build and Draft Release
        id: tauri-build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: ${{ github.ref_name }}
          releaseDraft: true
          prerelease: false
          includeDebug: false
          args: ''

      - name: Compute Checksums for Built Artifacts
        id: checksums
        shell: bash
        run: |
          set -euo pipefail
          # artifactPaths is a newline-separated list
          echo "Artifacts:\n${{ steps.tauri-build.outputs.artifactPaths }}"
          tmpdir=$(mktemp -d)
          echo "checksumDir=$tmpdir" >> $GITHUB_OUTPUT
          while IFS= read -r artifact; do
            [ -z "$artifact" ] && continue
            # Compute SHA256 alongside artifact in a temp dir
            base=$(basename "$artifact")
            shasum -a 256 "$artifact" > "$tmpdir/$base.sha256"
          done <<< "${{ steps.tauri-build.outputs.artifactPaths }}"

      - name: Upload Checksums to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ${{ steps.checksums.outputs.checksumDir }}/*.sha256

      # Windows Code Signing (deferred for MVP)
      # - name: Import Code Signing Certificate
      #   if: false # enable when signing is configured
      #   shell: pwsh
      #   env:
      #     WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      #     WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      #   run: |
      #     New-Item -ItemType Directory -Force -Path certificate | Out-Null
      #     Set-Content -Path certificate\\tempCert.txt -Value $env:WINDOWS_CERTIFICATE
      #     certutil -decode certificate\\tempCert.txt certificate\\cert.pfx
      #     Remove-Item certificate\\tempCert.txt
      #     $password = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -AsPlainText -Force
      #     Import-PfxCertificate -FilePath certificate\\cert.pfx -CertStoreLocation Cert:\\LocalMachine\\My -Password $password | Out-Null
